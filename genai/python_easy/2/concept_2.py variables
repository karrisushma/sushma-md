{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NU4fyQw7i99j"
      },
      "source": [
        "# ðŸ”¢ Numbers - The Math Masters"
      ],
      "id": "NU4fyQw7i99j"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v4t8DAJ5i99k"
      },
      "source": [
        "## Types of Numbers\n",
        "\n",
        "- ðŸ”¢ **Integers (int):** Whole numbers â†’ 5, -3, 1000\n",
        "- ðŸ“Š **Floats (float):** Decimal numbers â†’ 3.14, -2.5, 0.001\n",
        "- ðŸ’¡ Python automatically chooses the right type!"
      ],
      "id": "v4t8DAJ5i99k"
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xc2b7QR1i99k",
        "outputId": "84374ab9-10f6-401e-b7fd-871148793576"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "150 70 40 5.0 8\n"
          ]
        }
      ],
      "source": [
        "# Different types of numbers\n",
        "score = 95              # Integer\n",
        "price = 29.99           # Float\n",
        "temperature = -5        # Negative integer\n",
        "\n",
        "# Basic arithmetic\n",
        "total = 100 + 50        # Addition: 150\n",
        "difference = 100 - 30   # Subtraction: 70\n",
        "product = 5 * 8         # Multiplication: 40\n",
        "division = 15 / 3       # Division: 5.0 (always float!)\n",
        "power = 2 ** 3          # Exponent: 8\n",
        "\n",
        "print(total, difference, product, division, power)"
      ],
      "id": "xc2b7QR1i99k"
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5dFOoPosi99l",
        "outputId": "59e4a82a-e139-48dc-c282-1805432fd487"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "17 divided by 5 gives remainder: 2\n",
            "Floor division: 3\n",
            "Result: 14, Result2: 20\n"
          ]
        }
      ],
      "source": [
        "# More operations\n",
        "remainder = 17 % 5      # Modulo (remainder): 2\n",
        "floor_div = 17 // 5     # Floor division: 3\n",
        "\n",
        "# Order of operations (PEMDAS)\n",
        "result = 2 + 3 * 4      # 14\n",
        "result2 = (2 + 3) * 4   # 20\n",
        "\n",
        "print(f\"17 divided by 5 gives remainder: {remainder}\")\n",
        "print(f\"Floor division: {floor_div}\")\n",
        "print(f\"Result: {result}, Result2: {result2}\")"
      ],
      "id": "5dFOoPosi99l"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x1plQ3VEi99l"
      },
      "source": [
        "## ðŸ§® Quick Math Check\n",
        "\n",
        "**What will this code output?**\n",
        "\n",
        "```python\n",
        "age_in_days = 25 * 365\n",
        "print(age_in_days)\n",
        "```\n",
        "\n",
        "_How might this be useful in a GenAI application?_"
      ],
      "id": "x1plQ3VEi99l"
    },
    {
      "cell_type": "code",
      "source": [
        "age_in_days = 25 * 365\n",
        "print(age_in_days)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yrk1fkzmjNSL",
        "outputId": "31d62ece-1ec7-48ef-ebc1-b9fdd0ddc19e"
      },
      "id": "Yrk1fkzmjNSL",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total = 100+32\n",
        "difference = 345-43\n",
        "product = 32*84\n",
        "division = 76/3\n",
        "print(total)\n",
        "print(difference)\n",
        "print(product)\n",
        "print(division)\n",
        "print(total+difference+product)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sDlEcm2TjUE6",
        "outputId": "d036a6d9-1569-49eb-9af0-f3ab52903d15"
      },
      "id": "sDlEcm2TjUE6",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "132\n",
            "302\n",
            "2688\n",
            "25.333333333333332\n",
            "3122\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "total_appels = 132+54\n",
        "difference_of_appels = 324-34\n",
        "product_of_appels = 89*8\n",
        "print (total_appels)\n",
        "print (difference_of_appels)\n",
        "print (product_of_appels)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LF2z4Qwwkcxk",
        "outputId": "34870c5b-c32a-4e93-a643-41164fee5a17"
      },
      "id": "LF2z4Qwwkcxk",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "186\n",
            "290\n",
            "712\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.x"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}